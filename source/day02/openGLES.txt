openGL:开放图形库,es(嵌入式系统)
openGLES:一个子集.

3D游戏:
图形处理:

openGL语言:
函数:

c:
java:

动画:
ps:
透视:

矩阵:

SurfaceView:表层视图

GLSurfaceView:
renderer:渲染器

黑色  +  白色
000  255

viewPort:视口,输出画面的区域.

openGL:matrix,矩阵.

投影:
	透视投影:有深度,越远越小.
	正投影:没有深度,相同大小.


GLSurfaceView:GL表层视图,输出openGL画面的控件.
GLSurfaceView.Renderer:openGL渲染器,绘制openGL的类.

gl.glMatrixMode(int n);
	矩阵模式,openGL基于状态的,操纵很多矩阵,通过该函数指定使用哪个矩阵.
	常用的矩阵有:
		GL10.GL_PROJECTION:投影矩阵.
		GL10.GL_MODELVIEW:模型视图矩阵.
	指定使用哪个矩阵之后,需要先加载单位矩阵(使用gl.loadIdentity()方法,类似于矩阵归零.

frustum:平截头体,拍摄画面的一个区域,是一个棱台,对投影矩阵进行操纵.
		参数:
		left:左侧距离
		right:右侧距离
		bottom:下方距离
		top:上方距离
		zNear:近平面距离
		zFar:远平面距离
		gl.glFrustum(,,,,,,);

设置眼睛的位置.
	//涉及到眼球的坐标,观察的点,向上的向量
	//操纵的是模型视图矩阵,因此需要先设置gl.glMatrixMode(Gl_modelview);
	GLU.gluLookat(gl,eyex,eyey,eyez,centerx,centery,centerz,upx,upy,upz);

使用openGL步骤:
1.创建GLSurfaceView对象
2.创建GLSurfaceView.renderer实现类.
3.设置activity的contentView,以及设置view的render对象.
4.实现render类的过程.
	a.onSurfaceCreate()方法
		1.设置清屏的颜色和启用顶点缓冲区
		//设置清屏色
		gl.glClearColor(0, 0, 0, 1);
		//启用顶点缓冲区.
		gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);
	b.onSurfaceChanged()方法
		1.设置viewport(视口)
			gl.glViewport(0, 0, width, height);
		2.操纵投影矩阵,设置平截头体(比例通常和视口比例相同,否则输出画面会走样)
			//矩阵模式,投影矩阵,openGL基于状态机
			gl.glMatrixMode(GL10.GL_PROJECTION);
			//加载单位矩阵
			gl.glLoadIdentity();
			//平截头体
			gl.glFrustumf(-1f, 1f, -ratio, ratio, 3, 7);
	c.onDrawFrame()方法
		1.清除颜色缓冲区
			gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
		2.操纵模型视图矩阵,设置眼球的参数
			gl.glMatrixMode(GL10.GL_MODELVIEW);
			gl.glLoadIdentity();//加载单位矩阵
			GLU.gluLookAt(gl, 0, 0, 5, 0, 0, 0, 0, 1, 0);
		3.定义图形顶点坐标值数组
			float[] coords = {
				0f,0.5f,0f,
				-0.5f,-0.5f,0f,
				0.5f,-0.5f,0f
			};
		4.将顶点坐标转换成缓冲区数据
			//分配字节缓存区空间,存放顶点坐标数据
			ByteBuffer ibb = ByteBuffer.allocateDirect(coords.length * 4);
			//设置的顺序(本地顺序)
			ibb.order(ByteOrder.nativeOrder());
			//放置顶点坐标数组
			FloatBuffer fbb = ibb.asFloatBuffer();
			fbb.put(coords);
			//定位指针的位置,从该位置开始读取顶点数据
			ibb.position(0);
		5.设置绘图颜色
			gl.glColor4f(1f, 0f, 0f, 1f);
		6.指定顶点缓冲区指针
			//3:3维点,使用三个坐标值表示一个点
			//type:每个点的数据类型
			//stride:0,跨度.
			//ibb:指定顶点缓冲区
			gl.glVertexPointer(3, GL10.GL_FLOAT, 0, ibb);
		7.绘图
			//0:起始点:
			//3:绘制点的数量
			gl.glDrawArrays(GL10.GL_TRIANGLES, 0, 3);

纹理:
	openGLES1.0 ---> openGL1.3
	openGLES1.1 ---> openGL1.5

pipeline:管线:
opengl application: geometry(几何图形) + texture(纹理贴图)
vertex data(顶点数据):lighting(光照) transform(变换) scale:缩放
geometry:rasterization(光栅) clipping(剪裁)
fragment(段):fog(雾) + texture.
framebufer(帧缓冲区):stecil(蒙版) z-test:深度测试 alpha:透明 blending(混合)
eyeball(眼球):

屏幕坐标:原点在左上
		 |-------->
		 |
		 |
		 |
		\|/
		 .
数学坐标系:原点左下角
	   /|\
		|
		|
		o-------->

openGL3D坐标系(笛卡尔坐标系)
		|
		|
		|
		|-------->
	   /
	  /
	 /

clip:

renderer:渲染
渲染模式:
	持续渲染.

图元:
1.点
	pionts:
2.线
	lines:线段集合
	line_strip,线带
	line_loop,线环
3.三角形
	triangles:三角形集
	triangle_strip:三角形带
	triangle_fan:扇面.


顶点着色模式:
	1.smooth,平滑模式.默认
	2.flat,单调.

深度轴:z轴
深度缓冲区:深度值.
深度测试:启用z值,被遮挡的问题看不见

currface
剔除:如果看不见的部分,告诉openGL不要绘图.

渲染模式:
	持续:
	命令(脏):
	onDrawFrame();
	requestRender();

着色模式:
	平滑:渐变
	单调:单一的一个颜色

剪裁:不在viewPort整个视口内渲染,指定一个剪裁区.在区域内渲染.

顶点缓冲区:byteBuffer FloatBuffer:float rgba 16

环绕:顶点的指定次序以及方向地组合称为环绕(winding).
triangles:
triangle_strip:
triangle_fan:扇面

stencil:模板.

变换:
(1)视图	---指定观察者或者相机位置	glu.glLookup(..)
模型	---场景中移动物体
模型视图---描述视图和模型变换的对偶性
(2)投影	---改变可视区大小以及重新设置形状,glFrustum()
(3)视口	---伪变换,缩放.

顶点变换管线:

			x 模型视图矩阵						x 投影矩阵			  透视除法						 视口变换
源顶点数据		----->		经过变换的视觉坐标		---->	剪裁坐标	--->	经过规范化的设备坐标	--->	窗口坐标

openGl光照

rgb:0-1

openGL光照:
颜色成分:
	r:
	g:
	b:
	a:
光的成分:由RGBA值决定
	1.环境光:没有方向,向四周均匀发散.全局因素.ambient
	2.散射光:有方向性,根据入射光角度均匀反射开来.物体表面的颜色主要取决于散射光,diffuse
	3.镜面光:具有很强的方向性,高度方向性,specular

