原理：
	camera获取到得数据通过setPreviewTexture(SurfaceTexture{获取textureId去创建SurfaceTexture})
	通过SurfaceTexture 的setOnFrameAvailableListener 方法不断调用requestRender
		-> 
			public void onDrawFrame(GL10 gl) {
				if (surfaceTexture != null) {
					surfaceTexture.updateTexImage();
				}
				... // 绘制代码
			}
	updateTexImage方法会将ImageStream的图片数据更新到GL_OES_EGL_image_external类型的纹理中
	#######################################################################
	摄像头.
	1.相机预览
		相机预览：camera.setPreviewTexture(SurfaceTexture)
		纹理创建： GLES11Ext.GL_TEXTURE_EXTERNAL_OES

		顶点着色器：
			attribute vec4 vPosition;
			attribute vec2 vCoord;
			uniform mat4 vMatrix;
			uniform mat4 vCoordMatrix;
			varying vec2 textureCoordinate;

			void main(){
				gl_Position = vMatrix*vPosition;
				// 相机矩阵X4维坐标 的xy，取2维坐标
				textureCoordinate = (vCoordMatrix*vec4(vCoord,0,1)).xy;
			}
		片元着色器：
			#extension GL_OES_EGL_image_external : require
			precision mediump float;
			varying vec2 textureCoordinate;
			uniform samplerExternalOES vTexture;
			void main() {
				gl_FragColor = texture2D( vTexture, textureCoordinate );
			}
		大多数的Android手机，前摄像头预览数据旋转了90度，并且左右镜像了，后摄像头旋转了270度

		//通过传入图片宽高和预览宽高，计算变换矩阵，得到的变换矩阵是预览类似ImageView的centerCrop效果
		public static float[] getShowMatrix(int imgWidth,int imgHeight,int viewWidth,int viewHeight){
			float[] projection=new float[16];
			float[] camera=new float[16];
			float[] matrix=new float[16];

			float sWhView=(float)viewWidth/viewHeight;
			float sWhImg=(float)imgWidth/imgHeight;
			if(sWhImg>sWhView){
				Matrix.orthoM(projection,0,-sWhView/sWhImg,sWhView/sWhImg,-1,1,1,3);
			}else{
				Matrix.orthoM(projection,0,-1,1,-sWhImg/sWhView,sWhImg/sWhView,1,3);
			}
			Matrix.setLookAtM(camera,0,0,0,1,0,0,0,0,1,0);
			Matrix.multiplyMM(matrix,0,projection,0,camera,0);
			return matrix;
		}

		利用上面三个方法，针对前后摄像头，我们可以计算我们需要的变换矩阵：
		float[] matrix=new float[16];
		Gl2Utils.getShowMatrix(matrix,this.dataWidth,this.dataHeight,this.width,this.height);
		if(cameraId==1){
			Gl2Utils.flip(matrix,true,false);
			Gl2Utils.rotate(matrix,90);
		}else{
			Gl2Utils.rotate(matrix,270);
		}
		mOesFilter.setMatrix(matrix);

		//绑定相机
		GLES20.glActiveTexture(GLES20.GL_TEXTURE0+getTextureType()); // 激活纹理单元0
        GLES20.glBindTexture(GLES11Ext.GL_TEXTURE_EXTERNAL_OES,getTextureId()); //绑定2D纹理
        GLES20.glUniform1i(mHTexture,getTextureType()); //将纹理设置给Shader