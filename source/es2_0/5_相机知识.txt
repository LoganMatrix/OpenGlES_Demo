原理：
	camera获取到得数据通过setPreviewTexture(SurfaceTexture{获取textureId去创建SurfaceTexture})
	通过SurfaceTexture 的setOnFrameAvailableListener 方法不断调用requestRender
		-> 
			public void onDrawFrame(GL10 gl) {
				if (surfaceTexture != null) {
					surfaceTexture.updateTexImage();
				}
				... // 绘制代码
			}
	updateTexImage方法会将ImageStream的图片数据更新到GL_OES_EGL_image_external类型的纹理中
	#######################################################################
	摄像头.
	1.相机预览
		相机预览：camera.setPreviewTexture(SurfaceTexture)
		纹理创建： GLES11Ext.GL_TEXTURE_EXTERNAL_OES

		顶点着色器：
			attribute vec4 vPosition;
			attribute vec2 vCoord;
			uniform mat4 vMatrix;
			uniform mat4 vCoordMatrix;
			varying vec2 textureCoordinate;

			void main(){
				gl_Position = vMatrix*vPosition;
				// 相机矩阵X4维坐标 的xy，取2维坐标
				textureCoordinate = (vCoordMatrix*vec4(vCoord,0,1)).xy;
			}
		片元着色器：
			#extension GL_OES_EGL_image_external : require
			precision mediump float;
			varying vec2 textureCoordinate;
			uniform samplerExternalOES vTexture;
			void main() {
				gl_FragColor = texture2D( vTexture, textureCoordinate );
			}
		大多数的Android手机，前摄像头预览数据旋转了90度，并且左右镜像了，后摄像头旋转了270度

		//通过传入图片宽高和预览宽高，计算变换矩阵，得到的变换矩阵是预览类似ImageView的centerCrop效果
		public static float[] getShowMatrix(int imgWidth,int imgHeight,int viewWidth,int viewHeight){
			float[] projection=new float[16];
			float[] camera=new float[16];
			float[] matrix=new float[16];

			float sWhView=(float)viewWidth/viewHeight;
			float sWhImg=(float)imgWidth/imgHeight;
			if(sWhImg>sWhView){
				Matrix.orthoM(projection,0,-sWhView/sWhImg,sWhView/sWhImg,-1,1,1,3);
			}else{
				Matrix.orthoM(projection,0,-1,1,-sWhImg/sWhView,sWhImg/sWhView,1,3);
			}
			Matrix.setLookAtM(camera,0,0,0,1,0,0,0,0,1,0);
			Matrix.multiplyMM(matrix,0,projection,0,camera,0);
			return matrix;
		}

		利用上面三个方法，针对前后摄像头，我们可以计算我们需要的变换矩阵：
		float[] matrix=new float[16];
		Gl2Utils.getShowMatrix(matrix,this.dataWidth,this.dataHeight,this.width,this.height);
		if(cameraId==1){
			Gl2Utils.flip(matrix,true,false);
			Gl2Utils.rotate(matrix,90);
		}else{
			Gl2Utils.rotate(matrix,270);
		}
		mOesFilter.setMatrix(matrix);

		//绑定相机
		GLES20.glActiveTexture(GLES20.GL_TEXTURE0+getTextureType()); // 激活纹理单元0
        GLES20.glBindTexture(GLES11Ext.GL_TEXTURE_EXTERNAL_OES,getTextureId()); //绑定2D纹理
        GLES20.glUniform1i(mHTexture,getTextureType()); //将纹理设置给Shader


##################################################################################################
 优化：
        1> 加入VBO,FBO缓存优化
        2> 横竖屏适配
    （流程： 相机录制-->  camera.setPreviewTexture(surfaceTexture)-->
                                     surfaceTexture.setOnFrameAvailableListener-->
                                     SurfaceTexture surfaceTexture = new SurfaceTexture(cameraTextureid)-->
                                     cameraTextureid-->
                                     GL_TEXTURE_EXTERNAL_OES-->
                                     FBO( GL_TEXTURE_2D)-->
                                     在根据FBO里面的GL_TEXTURE_2D的textureId直接绘制出来）
        1>
       onSurfaceCreated 新增：
            VBO 缓存顶点，像素点，并在onDrawFrame里面使用，
            创建2个texture,一个是简单的纹理GL_TEXTURE_2D，用于在FBO里面，一个是相机的纹理GL_TEXTURE_EXTERNAL_OES，用于相机绘制的纹理到里面去，
        2> 自己尝试适配横竖屏即可，录制直接设置满屏录制， 在FBO缓存texture与纹理相机时候的宽高，直接设置屏幕宽高，真正绘制时候的宽高是根据onSurfaceChanged去设置即可
        （此处有2个不同的宽高，固有不同之处）
        calculateMatrix在初始化和activity里面的onConfigurationChanged中调用：
       （activity的xml里面设置 ：  android:configChanges="orientation|keyboardHidden|screenSize" ）
          private void calculateMatrix(Context context) {
                // 重置matrix
                Matrix.setIdentityM(matrix, 0);

                int angle = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay().getRotation();
                switch (angle) {
                    case Surface.ROTATION_0:
                        Log.d("123", "0");
                        if (cameraId == Camera.CameraInfo.CAMERA_FACING_BACK) {
                            Matrix.rotateM(matrix,0,90, 0, 0, 1);
                            Matrix.rotateM(matrix,0,180, 1, 0, 0);
                        } else {
                            Matrix.rotateM(matrix,0,90f, 0f, 0f, 1f);
                        }

                        break;
                    case Surface.ROTATION_90:
                        Log.d("123", "90");
                        if (cameraId == Camera.CameraInfo.CAMERA_FACING_BACK) {
                            Matrix.rotateM(matrix,0,180, 0, 0, 1);
                            Matrix.rotateM(matrix,0,180, 0, 1, 0);
                        } else {
                            Matrix.rotateM(matrix,0,90f, 0f, 0f, 1f);
                        }
                        break;
                    case Surface.ROTATION_180:
                        Log.d("123", "180");
                        if (cameraId == Camera.CameraInfo.CAMERA_FACING_BACK) {
                            Matrix.rotateM(matrix,0,90f, 0.0f, 0f, 1f);
                            Matrix.rotateM(matrix,0,180f, 0.0f, 1f, 0f);
                        } else {
                            Matrix.rotateM(matrix,0,-90, 0f, 0f, 1f);
                        }
                        break;
                    case Surface.ROTATION_270:
                        Log.d("123", "270");
                        if (cameraId == Camera.CameraInfo.CAMERA_FACING_BACK) {
                            Matrix.rotateM(matrix,0,180f, 0.0f, 1f, 0f);
                        } else {
                            Matrix.rotateM(matrix,0,0f, 0f, 0f, 1f);
                        }
                        break;
                }
                mOesFilter.setMatrix(matrix);
            }

