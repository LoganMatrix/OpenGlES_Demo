1.	导入库

	cmake 中 的 target_link_libraries 导入：
		EGL                EGL环境相关的库
		GLESv2             OpenGL ES 2.0的库
		android            ANativeWindow 相关库

2.	EGL环境搭建

    1.EGLHelper的创建
    2.EGLThread 线程的搭建
    3.EGLThread 线程回调的创建
    4.增加手动，自动rendMode的刷新设置

3.	OpenGL绘制流程

    绘制三角形，绘制四边形，绘制纹理，矩阵变换

    注：学习路径： https://learnopengl-cn.github.io/01%20Getting%20started/07%20Transformations/
        正交投影：
            1、2D图像绘制
            2、会把图像缩放到一个矩形区域内
            3、控制图像长宽比不变

            orthoM(float left, float right, float bottom, float top)

4.	实用

	重构OpneGL模块
	
		1、OpenGL基类
		2、OpenGL操作类
		3、OpenGL基类实现类（具体的绘制实现）
		目的：把重心放在绘制层，而不用花太多时间去处理各种生命周期和线程

	动态切换滤镜
	
		思路：根据OpenGL绘制原理（必须在EGL线程中），所以我们可以在EGL线程中添加
		一个新的回调方法用于处理滤镜的切换。

	回收OpenGL资源
	
		函数：glDeleteXXX – shader texture program等
		思路：根据OpenGL绘制原理（必须在EGL线程中），所以我们可以在EGL线程中添加
		一个新的回调方法用于处理资源回收。

	动态切换纹理
	
		onDraw回调中
		glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, w, h, 0, GL_RGBA, GL_UNSIGNED_BYTE, pixels);

	渲染YUV视频数据

	    什么是YUV？
        YUV：
            1、是一种颜色编码方法。Y表示明亮度，也就是灰度值。U和V则是色度、浓度，作用是描述影像
            色彩及饱和度，用于指定像素的颜色。

            2、没有UV数据，也是可以显示完整画面的（黑白）。

            3、映射范围：

            Y：（0~1）    U：（-0.5~0.5）   V：（-0.5~0.5）

            4、常见格式：

            YUV420P：YYYYYYYY  UUVV
            NV21：YYYYYYYY  VUVU

        shadler.glsl:
            precision mediump float;
            varying vec2 ft_Position;
            uniform sampler2D sampler_y;
            uniform sampler2D sampler_u;
            uniform sampler2D sampler_v;
            void main() {
               float y,u,v;
               y = texture2D(sampler_y,ft_Position).x;
               u = texture2D(sampler_u,ft_Position).x - 0.5;
               v = texture2D(sampler_v,ft_Position).x - 0.5;

               vec3 rgb;
               rgb.r = y + 1.403 * v;
               rgb.g = y - 0.344 * u - 0.714 * v;
               rgb.b = y + 1.770 * u;

               gl_FragColor = vec4(rgb,1);
            };

        注：OpenGL之所以能渲染YUV，其实是利用了它的并行计算能力来快速将YUV->RGB。

        Ffmpeg获取YUV数据命令： .\ffmpeg.exe -i '.\xxx.mp4' -pix_fmt yuv420p blr.yuv

	总结

	    1、android ndk项目创建（其他NDK项目一样）
        2、EGL环境和EGL线程（java层一样）
        3、自定义SurfaceView添加EGL线程
        4、OpenGL绘制流程
        5、三角形、四边形
        6、图片纹理绘制
        7、矩阵操作（旋转、缩放、平移、投影）（结合可做动画效果）
        8、滤镜切换（各种酷炫效果）
        9、纹理切换（水印，跑马灯等等）
        10、yuv数据渲（视频渲染）
